{"ast":null,"code":"var _jsxFileName = \"/Users/rubenmicula/Desktop/appointment-planner-starting-v18/src/containers/contactsPage/ContactsPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { ContactForm } from \"../../components/contactForm/ContactForm\";\nimport { TileList } from \"../../components/tileList/TileList\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ContactsPage = props => {\n  _s();\n  /*\r\n  Define state variables for \r\n  contact info and duplicate check\r\n  */\n\n  const [name, setName] = useState('');\n  const [phoneNumber, setPhoneNumber] = useState('');\n  const [email, setEmail] = useState('');\n  const [duplicate, setDuplicate] = useState(false);\n  const handleSubmit = e => {\n    e.preventDefault();\n    /*\r\n    Add contact info and clear data\r\n    if the contact name is not a duplicate\r\n    */\n\n    if (!duplicate) {\n      props.contactFn(name, phoneNumber, email);\n      setName('');\n      setPhoneNumber('');\n      setEmail('');\n    }\n  };\n\n  /*\r\n  Using hooks, check for contact name in the \r\n  contacts array variable in props\r\n  */\n\n  useEffect(() => {\n    for (const contactItem of props.contactArr) {\n      if (contactItem.name === name) {\n        if (!duplicate) {\n          setDuplicate(true);\n          alert('Contact is already in the list');\n        }\n        return;\n      } else {\n        setDuplicate(false);\n      }\n    }\n  }, [props.contactArr, name, duplicate]);\n  console.log(props.contactArr);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"section\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Add Contact\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ContactForm, {\n        name: name,\n        setName: setName,\n        phone: phoneNumber,\n        setPhone: setPhoneNumber,\n        email: email,\n        setEmail: setEmail,\n        handleSubmit: handleSubmit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Contacts\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TileList, {\n        contactArr: props.contactArr\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n};\n_s(ContactsPage, \"RIOrmY1GxEuIKU76e8j/c+tbHlg=\");\n_c = ContactsPage;\nvar _c;\n$RefreshReg$(_c, \"ContactsPage\");","map":{"version":3,"names":["React","useState","useEffect","ContactForm","TileList","jsxDEV","_jsxDEV","ContactsPage","props","_s","name","setName","phoneNumber","setPhoneNumber","email","setEmail","duplicate","setDuplicate","handleSubmit","e","preventDefault","contactFn","contactItem","contactArr","alert","console","log","children","fileName","_jsxFileName","lineNumber","columnNumber","phone","setPhone","_c","$RefreshReg$"],"sources":["/Users/rubenmicula/Desktop/appointment-planner-starting-v18/src/containers/contactsPage/ContactsPage.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\n\r\nimport { ContactForm } from \"../../components/contactForm/ContactForm\";\r\nimport { TileList } from \"../../components/tileList/TileList\";\r\n\r\nexport const ContactsPage = (props) => {\r\n  /*\r\n  Define state variables for \r\n  contact info and duplicate check\r\n  */\r\n\r\n  const [name, setName] = useState('');\r\n  const [phoneNumber, setPhoneNumber] = useState('');\r\n  const [email, setEmail] = useState('');\r\n  const [duplicate, setDuplicate] = useState(false);\r\n\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    /*\r\n    Add contact info and clear data\r\n    if the contact name is not a duplicate\r\n    */\r\n\r\n    if(!duplicate) {\r\n      props.contactFn(name, phoneNumber, email);\r\n      setName('');\r\n      setPhoneNumber('');\r\n      setEmail('');\r\n    }\r\n  };\r\n\r\n  /*\r\n  Using hooks, check for contact name in the \r\n  contacts array variable in props\r\n  */\r\n\r\n\r\n  useEffect(() => {\r\n\r\n    for(const contactItem of props.contactArr) {\r\n      if(contactItem.name === name) {\r\n        if(!duplicate) {\r\n          setDuplicate(true);\r\n          alert('Contact is already in the list');\r\n        }\r\n        return;\r\n      } else {\r\n        setDuplicate(false);\r\n      }\r\n    }\r\n\r\n  }, [props.contactArr, name, duplicate])\r\n\r\n  console.log(props.contactArr)\r\n\r\n  return (\r\n    <div>\r\n      <section>\r\n        <h2>Add Contact</h2> \r\n        <ContactForm name={name}\r\n                     setName={setName}\r\n                     phone={phoneNumber}\r\n                     setPhone={setPhoneNumber}\r\n                     email={email}\r\n                     setEmail={setEmail}\r\n                     handleSubmit={handleSubmit}\r\n                     />\r\n                    \r\n      </section>\r\n      <hr />\r\n      <section>\r\n        <h2>Contacts</h2>\r\n        <TileList contactArr={props.contactArr}/>\r\n      </section>\r\n    </div>\r\n  );\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}